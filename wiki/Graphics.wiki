= Drawing Model =

[[Windstille Drawing Model]]

= Layers =

The current graphics engine works by using three layers, to each of the layers you can draw independly. They are only later down the pipeline flushed down to the screen. The multiple layers are necessary for once to properly sort the graphics and secondly they are needed to create certain effects. The layer are:

== Color Layer ==

This is a normal layer, it contains just good old graphics as you would expect and is drawn as if you would draw directly to the screen.

== Light Layer ==

This layer specifies which areas of the screen are visible and which aren't. At start everything is invisible (black), to make stuff visible one uses white. One can also use other colors, red, green, etc. The light layer is later multiplied with the color layer, thus everything that is black (0) gets blended out and everything else gets lit by the color found in the light layer. Drawing to this layer should almost always happen via additive blending.

== Highlight Layer ==

The highlight layer is drawn ontop of the light layer, it is meant for lense-flares, glows and other effects that should be 100% visible all of the time and not covered by the light-layers shadow. It is the same as the color layer, only that the light layer doesn't get multiplied with it. Drawing should again be happening mostly additive, since thats gets closest to how real light acts.

= 3D Sprites =

The idea behind 3D sprites is to avoid the annoying and disk-space consuming procedure of converting all animations into 2D images. This should also allow to much easier apply different skins to the models and change cloth or the like. Bone animation and ragdoll physics would be nice, but for the first few releases (or probally ever) simple keyframe animation would be enough. Bone deform animation can be exported by something like this (only code to get the actual mesh data, no file writing there): 

<pre><nowiki>import Blender
from Blender import NMesh

for i in xrange(1,30):
        Blender.Set("curframe", i)
        mesh = NMesh.GetRawFromObject("Plane")
        obj = NMesh.PutRaw(mesh)
        obj.setLocation(0, i*5, 0)
</nowiki></pre>

= GLSL Effects =

GLSL, OpenGLs shader language, allows to do some very nice effects (fire, glass, shockwaves, etc.) the [http://windstille.berlios.de/screenshots.html Windstille webpage] has some videos of them. The good news is that they are rather easy to implement, the bad news is that one needs some framework to implement them properly, ie. first of one needs to get them through ClanLib and secondly for most effects one needs a copy of the current framebuffer, which however is rather expensive to read, so its hard to get. They are also rather GPU heavy, so when not handled with care they won't work on low-end graphic cards (GeforceFX5200, ATI9200) and they don't work at all on even older cards, so they would need to be optional.